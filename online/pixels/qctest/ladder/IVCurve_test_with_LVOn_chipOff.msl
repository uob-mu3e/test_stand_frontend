# Author J. Guzman-Funck, March 2022, Cosmic Run. jose.guzman-funck19@imperial.ac.uk || pepe.guzmanfunck@gmail.com
#
# IVCurve test with parameter specification at startup with LV on and chip with BiasBlock_on 0
#


PARAM half_ladder_id, "Half ladder ID"
PARAM hameg_id, "HAMEG ID"
PARAM channel, "HAMEG Channel"
PARAM current_limit, "HV Current limit (Amps)"
PARAM start_voltage, "Starting voltage"
PARAM step_size, "Voltage increment"
PARAM fine_step_size, "Fine voltage increment"
PARAM stop_voltage, "Stop voltage"



# Empty all buffers at startup
ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/V, 0
LOOP k, 32
    ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Voltage[$k-1], 0
    ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Current[$k-1], 0
ENDLOOP

# Turn on LV
CAT power_get_state_path, /Equipment/HAMEG, $hameg_id, /Variables/State[, $channel,]
CAT power_set_state_path, /Equipment/HAMEG, $hameg_id, /Variables/Set State[, $channel,]
CAT power_get_current_path, /Equipment/HAMEG, $hameg_id, /Variables/Current[, $channel,]


# Turn on channel $channel of HAMEG$hamge_id
ODBGET $power_get_state_path, now_state_hameg_channel

IF $now_state_hameg_channel == 0
    ODBSET $power_set_state_path, 1
    WAIT SECONDS, 10
ENDIF

# Turn off chips
starting_chip_id = $half_ladder_id*3

path_config = /Equipment/SwitchingCentral/Commands

LOOP i, 3
    _i = $i - 1
    CAT path_bias_this_chip, /Equipment/PixelsCentral/Settings/BIASDACS/, $starting_chip_id+$_i, /BiasBlock_on

    ODBSET $path_bias_this_chip, 0
    ODBSET $path_config/MupixChipToConfigure, $starting_chip_id+$_i
    ODBSET $path_config/MupixConfig, 1

    WAIT SECONDS, 10
ENDLOOP

WAIT SECONDS, 15

# TODO. Check
end = 201

# Check values
# If $current_limit is higher than value at Keithley complain
#ODBGET /Equipment/KEITHLEY0/Variables/Current Limit, keith_curr_limit
#IF $current_limit > $keith_curr_limit
#    MESSAGE "Current limit in Keithley is lower than requested current limit", 1
#    GOTO $end
#ENDIF

# If step size is smaller than fine step complain

IF $step_size < $fine_step_size
    MESSAGE "Fine step voltage must be smaller than step voltage", 1
    GOTO $end
ENDIF

# If voltage step is not compatible with intervals complain
c1 = (abs($stop_voltage)-abs($start_voltage)) % $step_size
IF $c1 != 0
    MESSAGE "Introduce compatible voltage step size"
    GOTO $end
ENDIF

# If fine voltage step is not compatible with interval complain
IF $step_size % $fine_step_size != 0
    MESSAGE "Introduce compatible fine voltage step size"
    GOTO $end
ENDIF

# TODO: add checks for half_ladder_id and configuration


# Calculation of num_steps without taking into account the fine steps of last interval
num_steps = (abs($stop_voltage)-abs($start_voltage))/$step_size+1
num_fine_steps = $step_size/$fine_step_size-1

# Check whether buffers are big enough
total_datapoints = $num_steps+$num_fine_steps
IF $total_datapoints > 32
    MESSAGE "Buffer too small for run. Increase buffer size or increase steps", 1
    GOTO $end
ENDIF



# Save values into ODB
#ODBSET /Equipment/PixelsCentral/QCTests/Ladder/current_half_ladder_id, $half_ladder_id
#ODBSET /Equipment/PixelsCentral/QCTests/Ladder/current_hameg_id, $hameg_id
#ODBSET /Equipment/PixelsCentral/QCTests/Ladder/current_channel, $channel


ODBSUBDIR /Equipment/PixelsCentral/QCTests/Ladder/IV/Input
    #ODBSET half_ladder_id, $half_ladder_id
    #ODBSET hameg_id, $hameg_id
    #ODBSET channel, $channel
    
    ODBSET hv_current_limit, $current_limit
    ODBSET start_voltage, $start_voltage
    ODBSET step_voltage, $step_size
    ODBSET fine_step_voltage, $fine_step_size
    ODBSET stop_voltage, $stop_voltage
ENDODBSUBDIR



# Config

v = -1*abs($start_voltage)
ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/V, $v

current = 0

# Turn on Keithley
ODBSET /Equipment/KEITHLEY0/Variables/Set State, 1
# Wait to turn on
WAIT SECONDS, 2


index_i = 0
LOOP i, $num_steps
    # Set voltage array in Output
    ODBSUBDIR /Equipment/PixelsCentral/QCTests/Ladder/IV/Output
        ODBGET V, v
        ODBSET Voltage[$index_i], $v
    ENDODBSUBDIR

    # Set voltage and measure
    ODBSUBDIR /Equipment/KEITHLEY0/Variables
        # Input voltage is positive but we want to output negative one
        ODBSET Demand Voltage, -1*abs($v)
        # Wait for measurement to be stored in Current
        WAIT SECONDS, 5
        ODBGET Current, current
    ENDODBSUBDIR
    
    # Outputting current to ODB and incrementing voltage
    ODBSUBDIR /Equipment/PixelsCentral/QCTests/Ladder/IV/Output
        ODBSET Current[$index_i], $current*1000000

        # increment voltage
        ODBINC V, $step_size
    ENDODBSUBDIR

    ODBGET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Current[$index_i], t_curr

    # If current has exceeded the limit, go back one step in voltage run and use fine_step_size
    IF abs($t_curr) > $current_limit*1000000*0.95
        IF $step_size == $fine_step_size
            MESSAGE "[DEBUG] Skipping fine loop after current exceeded limit", 1
            GOTO $end
        ENDIF

        IF $fine_step_size == 0
            MESSAGE "[DEBUG] Skipping fine loop after current exceeded limit", 1
            GOTO $end
        ENDIF

        #ODBGET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Voltage[$index_i-2], f_start_voltage
        f_start_voltage = $v - $step_size
        index_j = 0
        index_ij = $index_i + $index_j +1
        LOOP j, $num_fine_steps
            ODBSET /Equipment/KEITHLEY0/Variables/Demand Voltage, -1*abs($f_start_voltage+$j*$fine_step_size)
            WAIT SECONDS, 5
            ODBGET /Equipment/KEITHLEY0/Variables/Current, current
            ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Voltage[$index_ij], $f_start_voltage+$j*$fine_step_size
            ODBSET /Equipment/PixelsCentral/QCTests/Ladder/IV/Output/Current[$index_ij], $current*1000000
            index_j = $j
            index_ij = $index_i + $index_j + 1
        ENDLOOP
        BREAK
    ENDIF
    index_i = $i
ENDLOOP


# Turn off. # end
ODBSET /Equipment/KEITHLEY0/Variables/Demand Voltage, 0
ODBSET /Equipment/KEITHLEY0/Variables/Set State, 0
# Wait to turn off. 
WAIT SECONDS, 0.1


ODBSET $power_set_state_path, 0

# Save results to output folder
CAT out_path, output/, quick_, $half_ladder_id, .json

ODBSAVE /Equipment/PixelsCentral/QCTests/Ladder, $out_path
WAIT SECONDS, 0.1
